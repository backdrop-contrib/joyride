<?php

define('JOYRIDE_LIBRARY_VERSION', '2.0.3');

/**
 * Implements hook_libraries_info().
 * Return information about external libraries.
 *
 * @see http://backdrop.org/documentation/modules/libraries
 */
function joyride_libraries_info() {
  $libraries['joyride'] = array(
    'name' => 'Joyride',
    'vendor url' => 'http://www.zurb.com/',
    'download url' => 'https://github.com/zurb/joyride',
    'version callback' => 'joyride_version',
    'version arguments' => array(
      'file' => 'jquery.joyride-'.JOYRIDE_LIBRARY_VERSION.'.js',
      // jQuery Foundation Joyride Plugin 2.0.2
      'pattern' => '/jQuery Foundation Joyride Plugin ([\d][\d\.\0]+)/',
      'lines' => 2,
    ),
    'files' => array(
      'js' => array(
        'jquery.joyride-'.JOYRIDE_LIBRARY_VERSION.'.js',
        'modernizr.mq.js'
      ),
      'css' => array(
        'joyride-'.JOYRIDE_LIBRARY_VERSION.'.css',
      ),
    ),
  );

  return $libraries;
}

/**
 * Library version callback. Make sure the library version is correct.
 */
function joyride_version($library, $options) {
  // Provide defaults.
  $options += array(
    'file' => '',
    'pattern' => '',
    'lines' => 20,
    'cols' => 200,
  );

  $file = BACKDROP_ROOT . '/' . $library['library path'] . '/' . $options['file'];
  if (empty($options['file']) || !file_exists($file)) {
    return;
  }
  $file = fopen($file, 'r');
  while ($options['lines'] && $line = fgets($file, $options['cols'])) {
    if (preg_match($options['pattern'], $line, $version)) {
      if ($version[1] == JOYRIDE_LIBRARY_VERSION) {
        fclose($file);
        return $version[1];
      }
    }
    $options['lines']--;
  }
  fclose($file);
}

/**
 * Implements hook_init().
 * Perform setup tasks for non-cached page requests.
 *
 */
function joyride_init() {
  $tours = joyride_load_all();
  foreach($tours as $name => $tour) {
    if($tour['enabled']) {
    $path = $tour['path'];
      if ($path == current_path() || $path == request_path() || ($path == '<front>' && request_path() == '')) {
        joyride_run_tour($name);
      }
    }
  }
}

/**
 *  Adds necessary javascript to the page to run a tour.
 *  
 */
function joyride_run_tour($name) {
  $library = libraries_load('joyride');
  $library_loaded = $library && !empty($library['loaded']);
  backdrop_add_library('system', 'jquery.cookie');

  $js_name = 'jquery.joyride.js';
  $base_path = 'sites/all/libraries/joyride';

  if (!$library_loaded) {
    backdrop_set_message(t('Can\'t load Joyride library. Please download !url jQuery plugin and extract it to @path, so @js can be found at @full_path. Also please purge version info from Joyride file names (both .js and .css)', array(
      '!url' => l(t('Zurb Joyride'), 'https://github.com/zurb/joyride'),
      '@path' => $base_path,
      '@js' => $js_name,
      '@full_path' => $base_path . '/' . $js_name,
    )), 'error');
    return FALSE;
  }

  backdrop_add_js(backdrop_get_path('module', 'joyride') . '/inc/js/joyride_context.js');
  backdrop_add_css(backdrop_get_path('module', 'joyride') . '/inc/joyride_context.css');
  
  $tour = joyride_load($name);
  
  // Allow other modules to alter the tour.
  backdrop_alter('joyride_tour', $tour);

  $tips_content = joyride_format_content($tour['content']);
  if(empty($tips_content)) return FALSE;

  $js_settings = array(
    'joyrideContext' => array(
      'tips_content' => theme('joyride_tips', array('tips_content' => $tips_content)),
      'auto_start' => $tour['auto_start'],
      'play_once' => $tour['play_once'],
    ),
  );
  backdrop_add_js($js_settings, 'setting');
}


/**
 * Format the tour content into <li> elements.
 */
function joyride_format_content($data) {
  $list = '';
  foreach($data as $step) {
    $attributes = '';
    foreach($step['attributes'] as $tag => $attr) {
      $attributes .= $tag . '="' . $attr . '" ';
    }
    // Target attribute is in format #id or .class or may be blank. If not 
    // blank, we need to first change the tag to data-id or data-class, then 
    // remove the '#' or '.'
    // If blank, remove it.
    if(isset($step['target']) && $step['target'] != '') {
      $tag = ($step['target'][0] == '#') ? 'data-id' : 'data-class';
      $attr = substr($step['target'], 1);
      $attributes .= $tag . '="' . $attr . '" ';
    }
    $list .= '<li ' . $attributes . '>';
    $list .= '<h2>' . $step['header'] . '</h2>';
    $list .= '<div class="joyride-content">' . $step['body'] . '</div>';
    $list .= '</li>';
  }
  return $list;
}


/**
 * Callback function for loading all bootstrap tours in an array of 'btid' => 'name' format.
 */
function joyride_load_all() {
  $tours = &backdrop_static(__FUNCTION__);
  if (!isset($tours)) {
    if ($cache = cache_get('joyride_tours')) {
      $tours = $cache->data;
    }
    else {
      // Find all modules providing tours.
      $all_tours = config_get_names_with_prefix('tour');
      $tours = array();
      // Go through and load each config
      foreach($all_tours as $tour) {
        $config = config($tour);
        // Load the 'tours' config key
        $setting = $config->get('tour');
        $setting['config_name'] = $tour;
        $tours[$setting['machine_name']] = $setting;
      }
      cache_set('joyride_tours', $tours, 'cache');
    }
  }
  return $tours;
}

/**
 * Callback function for loading one tour by $name.
 */
function joyride_load($name) {
  $tours = joyride_load_all();
  if(isset($tours[$name])) {
    return $tours[$name];
  }
  return array();
}

/**
 * Implements hook_theme().
 * Register a module (or theme's) theme implementations.
 *
 */
function joyride_theme($existing, $type, $theme, $path) {
  return array(
    'joyride_tips' => array(
      'variables' => array('tips_content' => NULL),
      'template' => 'templates/joyride-tips',
    ),
    'joyride_help' => array(
      'variables' => array(),
      'template' => 'templates/joyride-help',
    ),
    'joyride_start_link' => array(
      'variables' => array('link_title' => NULL, 'options' => array()),
      'template' => 'templates/joyride-start-link',
      'file' => 'inc/joyride.theme.inc',
    ),
  );
}

/**
 * Implements hook_block_info().
 * Define all blocks provided by the module.
 *
 */
function joyride_block_info() {
  $blocks['joyride_start_link'] = array(
    'info' => t('Joyride Start Link'),
    'description' => t('Provides a themed start link for Joyride tours.')
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 * Return a rendered or renderable view of a block.
 *
 */
function joyride_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'joyride_start_link':
      $block['subject'] = '<none>';
      $block['content'] = array(
        '#theme' => 'joyride_start_link',
      );
      break;
  }
  return $block;
}

