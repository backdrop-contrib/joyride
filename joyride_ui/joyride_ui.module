<?php

//todos
// change config scheme to tour per file and delete export stuff.
// add alter/hooks
// change demo page


/**
 * Implements hook_menu().
 *
 * @see
 */
function joyride_ui_menu() {
  $items = array();

  $items['admin/config/user-interface/joyride'] = array(
    'title' => 'Joyride',
    'page callback' => 'joyride_ui_list_joyrides',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/user-interface/joyride/ui'] = array(
    'title' => 'Joyride UI',
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['admin/config/user-interface/joyride/ui/%'] = array(
    'title' => 'Joyride Editor',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('joyride_ui_edit_joyride', 5),
    'access arguments' => array('access administration pages'),
  );
	$items['admin/config/user-interface/joyride/ui/%/disable'] = array(
		'title' => 'Disable tour',
		'page callback' => 'backdrop_get_form',
		'page arguments' => array('joyride_ui_disable_joyride', 5),
    'access arguments' => array('access administration pages'),
		'type' => MENU_CALLBACK,
	);  
  $items['admin/config/user-interface/joyride/ui/add'] = array(
    'title' => 'Add new tour',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('joyride_ui_edit_joyride', 5),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_ACTION,
  );
  
  $items['admin/config/user-interface/joyride/demo'] = array(
    'title' => 'Joyride Demo (Start tour automatically)',
    'page callback' => 'theme',
    'page arguments' => array('joyride_demo'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/user-interface/joyride/demo/auto-start'] = array(
    'title' => 'Joyride Demo (Start tour automatically)',
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/user-interface/joyride/demo/manual-trigger'] = array(
    'title' => 'Joyride Demo (Use manual trigger to start tour)',
    'page callback' => 'theme',
    'page arguments' => array('joyride_demo'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

function joyride_ui_list_joyrides() {
  $items = joyride_load_all();
  $rows = array();
  foreach ($items as $name => $item) {
    $row['title'] = $item['title'];
    $row['description'] = $item['description'];
    $row['auto_start'] = $item['auto_start'] ? 'TRUE' : 'FALSE';
    $row['edit'] = (!$item['editable']) ? 'Not editable' : l('edit', 'admin/config/user-interface/joyride/ui/' . $name);
    $row['disable'] = l('disable', 'admin/config/user-interface/joyride/ui/' . $name . '/disable');
    $rows[] = $row;
  }
  if (!empty($rows)) {
    $header = array(
      t('Title'),
      t('Description'),
      t('Autostart'),
      t('Edit link'),
      t('Disable'),
    );
    $output = theme('table', array('header' => $header, 'rows' => $rows));
    return $output;
  }
  else {
    return t('There are no tours.');
  }
}


function joyride_ui_disable_joyride($form, &$form_state, $name) {
	$form = array();
	$form['name'] = array(
		'#type' => 'value',
		'#value' => $name,
	);
	return confirm_form(
		$form,
		t('Are you sure you want to disable this tour?'),
		'admin/config/user-interface/joyride',
		t(''),
		t('Disable'),
		t('Cancel')
	);

	return $form;
}

/**
 * submit handler for the example_delete
 * this function is invoked only when the user clicks confirm button
 * clickin on cancel, the user goes back to the $path
 */
function joyride_ui_disable_joyride_submit($form, &$form_state) {
  $items = joyride_load_all();
  $tour = $items[$form_state['values']['name']];

  $config = config($tour['config_name']);
  $config->set('tour.enabled', 0);
  $config->save();

	backdrop_set_message('You disabled ' . $form_state['values']['title'] . '.');
  cache_flush('cache');
	$form_state['redirect'] = 'admin/config/user-interface/joyride';
}


function joyride_ui_edit_joyride($form, &$form_state, $name) {
  $form['#tree'] = TRUE;
  
  $tour = array();
  
  if($name && $tour = joyride_load($name)) {
    backdrop_set_title($tour['title']);
    backdrop_sort($tour['content'], array('weight' => SORT_NUMERIC));

    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#default_value' => isset($tour['title']) ? $tour['title'] : '',
    );
    $form['config_name'] = array(
      '#type' => 'value',
      '#value' => $tour['config_name'],
    );
    $form['machine_name'] = array(
      '#type' => 'value',
      '#value' => $tour['machine_name'],
    );
    $form['editable'] = array(
      '#type' => 'value',
      '#value' => $tour['editable'],
    );
  }
  elseif($name =='add') {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#default_value' => isset($tour['title']) ? $tour['title'] : '',
    );
    $form['machine_name'] = array(
      '#type' => 'machine_name',
      '#default_value' => '',
      '#maxlength' => 21,
      '#machine_name' => array(
        'exists' => 'joyride_machine_name_exists',
        'source' => array('title'), 
      ),
    );
    $form['editable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Editable'),
    );
  }
  else {
    return array();
  }
  
  $form['name'] = array(
    '#type' => 'value',
    '#value' => $name,
  );
  $form['path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path'),
    '#default_value' => isset($tour['path']) ? $tour['path'] : '',
    '#required' => TRUE,
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#rows' => 3,
    '#default_value' => isset($tour['description']) ? $tour['description'] : '',
  );
  $form['auto_start'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto Start'),
    '#default_value' => isset($tour['auto_start']) ? $tour['auto_start'] : '',
  );
  $form['play_once'] = array(
    '#type' => 'checkbox',
    '#title' => t('Play Once'),
    '#default_value' => isset($tour['play_once']) ? $tour['play_once'] : '',
  );
  $form['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enabled'),
    '#default_value' => isset($tour['enabled']) ? $tour['enabled'] : 1,
  );
  $form['content'] = array(
    '#type' => 'fieldset',
    '#title' => t('People coming to the picnic'),
    // Set up the wrapper so that AJAX will be able to replace the fieldset.
    '#prefix' => '<div id="steps-fieldset-wrapper">',
    '#suffix' => '</div>',
  );
  if (empty($form_state['content'])) {
    if($name == 'add') {
      $form_state['content'][0] = joyride_ui_get_default_step();
    }
    else {
      $form_state['content'] = $tour['content'];
    }
  }
  
  foreach ($form_state['content'] as $i => $step) {
  //$step = isset($tour['content'][$i]) ? $tour['content'][$i] : array();
  $form['content'][$i]['header'] = array(
      '#type' => 'textfield',
      '#title' => t('Header'),
      '#default_value' => isset($step['header']) ? $step['header'] : '',
    );
    $form['content'][$i]['body'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#rows' => 2,
      '#default_value' => isset($step['body']) ? $step['body'] : '',
    );
    $form['content'][$i]['target'] = array(
      '#type' => 'textfield',
      '#title' => t('target'),
      '#default_value' => isset($step['target']) ? $step['target'] : '',
    );
    $form['content'][$i]['attributes']['data-button'] = array(
      '#type' => 'textfield',
      '#title' => t('data-button'),
      '#default_value' => isset($step['data-button']) ? $step['data-button'] : '',
    );
    $form['content'][$i]['attributes']['custom-class'] = array(
      '#type' => 'textfield',
      '#title' => t('custom-class'),
      '#default_value' => isset($step['custom_class']) ? $step['custom_class'] : '',
    );
    $form['content'][$i]['attributes']['data-options'] = array(
      '#type' => 'textarea',
      '#title' => t('data-options'),
      '#rows' => 2,
      '#default_value' => isset($step['data_options']) ? $step['data_options'] : '',
    );
    $form['content'][$i]['weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight'),
      '#default_value' => isset($step['weight']) ? $step['weight'] : 10,
      '#delta' => 10,
      '#title_display' => 'invisible',
    );
    $form['content'][$i]['delete'] = array(
      '#type' => 'checkbox',
      '#title' => t('Delete'),
      '#default_value' => 0,
    );
  }
  $form['content']['add_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add one more'),
    '#submit' => array('joyride_ui_add_one'),
    '#limit_validation_errors' => array(), 
    // '#ajax' => array(
      // 'callback' => 'joyride_ui_add_more_callback',
      // 'wrapper' => 'steps-fieldset-wrapper',
    // ),
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save Changes'));
  return $form;
}
function joyride_machine_name_exists($value) {
  $tours = joyride_load_all();
  return isset($tours[$value]);
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the names in it.
 */
function joyride_ui_add_more_callback($form, $form_state) {
  return $form['content'];
}

/**
 * Submit handler for the "add-one-more" button.
 *
 * Increments the max counter and causes a rebuild.
 */
function joyride_ui_add_one($form, &$form_state) {
  $form_state['content'][] = joyride_ui_get_default_step();
  $form_state['rebuild'] = TRUE;
}

function joyride_ui_get_default_step() {
  return array (
    'header' => '',
    'body' => '',
    'target' => '',
    'attributes' => array(
      'data-button' => '',
      'custom-class' => '',
      'data-options' => '',
    ),
    'weight' => 10,
  );
}

function joyride_ui_edit_joyride_validate($form, &$form_state) {
  form_state_values_clean($form_state);
  
  unset($form_state['values']['actions']);
  
  if(is_null($form_state['values']['content']) || (count($form_state['values']['content']) == 1 && $form_state['values']['content'][0]['delete'] == 1)) {
    form_set_error('form', 'No steps to save');
  }
  
  foreach($form_state['values']['content'] as $key => $content) {
    if(isset($content['target'][0]) && !in_array($content['target'][0], array('.', '#'))) {
      form_set_error('target', 'Target must be an Id or class; the first character should be \'.\' or \'#\'.');
    }
    
    if(!$content['body'] && !$content['header']) {
      form_set_error('body', 'Steps must have a body or a header or both.');
    }

    if($content['delete']) {
      unset($form_state['values']['content'][$key]);
    }

    unset($content['delete']);
  }
} 


function joyride_ui_edit_joyride_submit($form, &$form_state) {  
  $name = $form_state['values']['name'];
  unset($form_state['values']['name']);
  
  $data = $form_state['values'];
  $tour = array();
  
  // This is a new tour being added.
  if($name == 'add') {
    $config = config('tour.tour.' . $form_state['values']['machine_name']);
    //$tours = $config->get('tours');
  }
  else {
    $config = config($form_state['values']['config_name']);
    //$tour = $config->get('tour');
  }
  //$tours[$form_state['values']['machine_name']] = $data;
  $config->set('tour', $data);
  $config->save();
  cache_flush('cache');
  $form_state['redirect'] = 'admin/config/user-interface/joyride/ui';
}

function theme_joyride_ui_edit_joyride($variables) {
  $form = $variables['form'];
  $rows = array();
  $output = '';
  $output .= backdrop_render($form['title']);
  if(isset($form['machine_name'])) {
    $output .= backdrop_render($form['machine_name']);
  }
  $output .= backdrop_render($form['path']);
  $output .= backdrop_render($form['description']);
  $output .= backdrop_render($form['enabled']);
  $output .= backdrop_render($form['editable']);
  $output .= backdrop_render($form['auto_start']);
  $output .= backdrop_render($form['play_once']);
  
  $add_more = $form['content']['add_more'];
  unset($form['content']['add_more']);
  
  foreach (element_children($form['content']) as $id) {

    $form['content'][$id]['weight']['#attributes']['class'] = array('joyride-ui-weight');
    $rows[] = array(
      'data' => array(
        theme('joyride_content_row', $form['content'][$id]),
        backdrop_render($form['content'][$id]['delete']),
        backdrop_render($form['content'][$id]['weight']),
      ),
      'class' => array('draggable'),
    );
  }
  unset($form['content']);

  $header = array(t('Steps'), t('Delete'), t('Weight'));

  $table_id = 'joyride-content';

  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $table_id),
  ));
  $output .= backdrop_render($add_more);
  $output .= backdrop_render_children($form);

  backdrop_add_tabledrag($table_id, 'order', 'sibling', 'joyride-ui-weight');

  return $output;
}

function theme_joyride_content_row($content) {
    $row['header'] = backdrop_render($content['header']);
    $row['body'] = backdrop_render($content['body']);
    $row['target'] = backdrop_render($content['target']);
    $rows = array($row);

    if (!empty($rows)) {
    $header = array();
    $output = theme('table', array('header' => $header, 'rows' => $rows));
    
    $attributes = backdrop_render($content['attributes']['data-button']);
    $attributes .= backdrop_render($content['attributes']['custom-class']);
    $attributes .= backdrop_render($content['attributes']['data-options']);
    
    backdrop_add_js(backdrop_get_path('module', 'joyride_ui') . '/joyride_ui.js');
    $toggle = ' <a class="requirements-toggle" href="#">' . t('more') . '</a>';
    $details = '<div class="text table-filter-text-source"> ' . $toggle . '</div>' . '<div class="requirements">' . $attributes . '</div>';

    $output .= $details;
    return $output;
  }
  else {
    return t('There are no items in the queue.');
  }
}

/**
 * Implements hook_theme().
 *
 */
function joyride_ui_theme() {
  return array(
    // Theme function for the 'simple' example.
    'joyride_ui_edit_joyride' => array(
      'render element' => 'form',
    ),
    'joyride_content_row' => array(
      'render element' => NULL,
    ),
    'joyride_demo' => array(
      'variables' => array(),
      'template' => 'templates/joyride-demo',
    ),
  );
}

 /**
 * Implements hook_config_info().
 * Provides two dtour files: one with default tours for demo purposes and one 
 * which is blank, for storing user-created tours.
 */
function joyride_ui_config_info() {
  $prefixes['tour.tour.default'] = array(
    'label' => t('Joyride Default Tours'),
    'group' => t('Joyride'),
  );
  $prefixes['tour.tour.custom'] = array(
    'label' => t('Joyride Custom Tours'),
    'group' => t('Joyride'),
  );
  return $prefixes;
}
